#![allow(unused_doc_comments)]
//! This module implements `Runtime` trait and ensures that it uses correct `CHAIN_HASH`
use sov_address::EthereumAddress;
use sov_address::FromVmAddress;
use sov_evm::EvmAuthenticatorInput;
use sov_hyperlane_integration::HyperlaneAddress;
use sov_modules_api::capabilities::{TransactionAuthenticator};
#[cfg(feature = "native")]
use sov_modules_api::prelude::*;
use sov_modules_api::OperatingMode;
use sov_modules_api::Spec;
use sov_rollup_interface::da::DaSpec;

pub use stf_starter_declaration::GenesisConfig;
pub use stf_starter_declaration::Mailbox;
use stf_starter_declaration::Runtime as RuntimeInner;
pub use stf_starter_declaration::RuntimeCall;
#[cfg(feature = "native")]
pub use stf_starter_declaration::RuntimeSubcommand;

// CHAIN_HASH and Schema are generated during build time.
// This allows make sure that Runtime can be authenticated in ZKVM guest.
mod __generated {
    include!("../.artifacts/autogenerated.rs");
}

#[derive(Clone, Default)]
pub struct Runtime<S: Spec>(pub(crate) RuntimeInner<S>)
where
    <S as Spec>::Address: HyperlaneAddress + FromVmAddress<EthereumAddress>;

impl<S: Spec> sov_modules_stf_blueprint::Runtime<S> for Runtime<S>
where
    S::Da: DaSpec,
    S::Address: HyperlaneAddress + FromVmAddress<EthereumAddress>,
{
    // Make runtime authenticated.
    const CHAIN_HASH: [u8; 32] = __generated::CHAIN_HASH;

    type GenesisConfig = GenesisConfig<S>;

    #[cfg(feature = "native")]
    type GenesisInput = std::path::PathBuf;

    type Auth = sov_evm::EvmAuthenticator<S, Self>;

    #[cfg(feature = "native")]
    fn endpoints(api_state: sov_modules_api::rest::ApiState<S>) -> sov_modules_api::NodeEndpoints {
        use ::sov_modules_api::rest::HasRestApi;
        use ::sov_rollup_apis::endpoints::dedup::{DeDupEndpoint, NonceDeDupEndpoint};
        use ::sov_rollup_apis::endpoints::schema::{SchemaEndpoint, StandardSchemaEndpoint};

        let axum_router = Self::default().0.rest_api(api_state.clone());
        // Provide an endpoint to return dedup information associated with addresses.
        // Since our runtime is using the uniqueness module, we can use the provided `NonceDeDupEndpoint` implementation.
        let dedup_endpoint = NonceDeDupEndpoint::new(api_state.clone());
        let axum_router = axum_router.merge(dedup_endpoint.axum_router());
        let axum_router = axum_router.merge(sov_rollup_apis::endpoints::constants::axum_router());

        let schema_endpoint = StandardSchemaEndpoint::new(
            &serde_json::from_str(__generated::SCHEMA_JSON)
                .expect("Failed to deserialize schema json"),
                Self::CHAIN_HASH.into(),
        )
        .expect("Failed to initialize StandardSchemaEndpoint");
        let axum_router = axum_router.merge(schema_endpoint.axum_router());

        sov_modules_api::NodeEndpoints {
            axum_router,
            jsonrpsee_module: stf_starter_declaration::get_rpc_methods::<S>(api_state),
            background_handles: Vec::new(),
        }
    }

    #[cfg(feature = "native")]
    fn genesis_config(input: &Self::GenesisInput) -> Result<Self::GenesisConfig, anyhow::Error> {
        let contents = std::fs::read(input)?;
        Ok(serde_json::from_slice(&contents)?)
    }

    fn operating_mode(genesis: &Self::GenesisConfig) -> OperatingMode {
        genesis.chain_state.operating_mode
    }

    fn wrap_call(
        auth_data: <Self::Auth as TransactionAuthenticator<S>>::Decodable,
    ) -> Self::Decodable {
        match auth_data {
            EvmAuthenticatorInput::Evm(call) => Self::Decodable::Evm(call),
            EvmAuthenticatorInput::Standard(call) => call,
        }
    }

    fn allow_unregistered_tx(call: &Self::Decodable) -> bool {
        matches!(
            call,
            Self::Decodable::SequencerRegistry(
                sov_sequencer_registry::CallMessage::Register { .. }
            )
        )
    }
}

impl<S: Spec> sov_evm::EthereumAuthenticator<S> for Runtime<S>
where
    S::Address: HyperlaneAddress + FromVmAddress<EthereumAddress>,
{
    fn add_ethereum_auth(tx: sov_modules_api::RawTx) -> <Self::Auth as TransactionAuthenticator<S>>::Input {
        EvmAuthenticatorInput::Evm(tx)
    }
}
